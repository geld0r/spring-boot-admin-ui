buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'

version = '1.5.5'

jar {
    baseName = 'spring-boot-admin-ui'
    version = project.version
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.SR3'
    }
}


dependencies {
    compile "org.springframework.boot:spring-boot-starter"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "de.codecentric:spring-boot-admin-server:${version}"
    compile "de.codecentric:spring-boot-admin-server-ui:${version}"
    compile "de.codecentric:spring-boot-admin-server-ui-login:${version}"

    testCompile "org.springframework.boot:spring-boot-starter-test"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
    distributionType = "ALL"
}

allprojects {
    apply plugin: 'idea'
    idea {
        module {
            outputDir file('build/classes/main')
            testOutputDir file('build/classes/test')
        }
    }
    if(project.convention.findPlugin(JavaPluginConvention)) {
        // Change the output directory for the main and test source sets back to the old path
        sourceSets.main.output.classesDir = new File(buildDir, "classes/main")
        sourceSets.test.output.classesDir = new File(buildDir, "classes/test")
    }
}

apply from: 'gradle/docker.gradle'
