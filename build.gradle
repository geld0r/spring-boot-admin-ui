buildscript {
  ext {
    springBootVersion = '1.5.4.RELEASE'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'

version = '1.5.2'

jar {
  baseName = 'spring-boot-admin-ui'
  version = project.version
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencyManagement {
  imports {
    mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.SR1'
  }
}


dependencies {
  compile('org.springframework.boot:spring-boot-starter')
  compile('org.springframework.boot:spring-boot-starter-security')
  compile('de.codecentric:spring-boot-admin-server:1.5.2')
  compile('de.codecentric:spring-boot-admin-server-ui:1.5.2')
  compile('de.codecentric:spring-boot-admin-server-ui-login:1.5.2')

  testCompile('org.springframework.boot:spring-boot-starter-test')
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.2'
}

allprojects {
    apply plugin: 'idea'
    idea {
        module {
            outputDir file('build/classes/main')
            testOutputDir file('build/classes/test')
        }
    }
    if(project.convention.findPlugin(JavaPluginConvention)) {
        // Change the output directory for the main and test source sets back to the old path
        sourceSets.main.output.classesDir = new File(buildDir, "classes/main")
        sourceSets.test.output.classesDir = new File(buildDir, "classes/test")
    }
}

apply from: 'gradle/docker.gradle'
